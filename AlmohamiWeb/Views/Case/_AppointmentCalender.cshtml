@model Almohami.Services.Entities.CaseEntityModel
<link href="~/Content/Plugins/fullcalender/css/fullcalendar.css" rel="stylesheet" />
<script src="~/Content/Plugins/fullcalender/js/fullcalendar.js"></script>
<script>
    $(document).ready(function () {

        var sourceFullView = { url: '/Case/GetDiaryEvents/' };
        var sourceSummaryView = { url: '/Case/GetDiarySummary/' };
        var CalLoading = true;

        $('#calendar').fullCalendar({
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            },
            defaultView: 'agendaDay',
            editable: true,
            allDaySlot: false,
            selectable: true,
            slotMinutes: 15,
            events: '/Case/GetDiaryEvents/',
            eventClick: function (calEvent, jsEvent, view) {

                // display in modal

                var row = "";

                row += "<tr><td>" + calEvent.CaseAppointmentTitle + "</td><td>" + calEvent.CaseAppointmentTime + "</td><td>" + calEvent.AppointmentLength +
                    "</td><td>" + calEvent.CaseAppointmentCateTitle + "</td></tr>";
                
                $("#eventData").html(row);

                $("#popupEventDisplay").modal('show');

            },

            eventDrop: function (event, dayDelta, minuteDelta, allDay, revertFunc) {
                if (confirm("Confirm move?")) {
                    UpdateEvent(event.id, event.start);
                }
                else {
                    revertFunc();
                }
            },

            eventResize: function (event, dayDelta, minuteDelta, revertFunc) {

                if (confirm("Confirm change appointment length?")) {
                    UpdateEvent(event.id, event.start, event.end);
                }
                else {
                    revertFunc();
                }
            },

            dayClick: function (date, allDay, jsEvent, view) {
                $('#eventTitle').val("");
                $('#eventDate').val($.fullCalendar.formatDate(date, 'dd/MM/yyyy'));
                $('#eventTime').val($.fullCalendar.formatDate(date, 'HH:mm'));
                ShowEventPopup(date);
            },

            viewRender: function (view, element) {

                if (!CalLoading) {
                    if (view.name == 'month') {
                        $('#calendar').fullCalendar('removeEventSource', sourceFullView);
                        $('#calendar').fullCalendar('removeEvents');
                        $('#calendar').fullCalendar('addEventSource', sourceFullView);
                    }
                    else {
                        $('#calendar').fullCalendar('removeEventSource', sourceFullView);
                        $('#calendar').fullCalendar('removeEvents');
                        $('#calendar').fullCalendar('addEventSource', sourceFullView);
                    }
                }
            }

        });

        CalLoading = false;
    });


    $('#btnPopupCancel').click(function () {
        ClearPopupFormValues();
        $("#popupEventForm").modal('hide');
    });

    function save() {
        if ($('#eventTitle').val() == "" || $('#eventTitle').val() == 'undefined' || $('#eventTitle').val() == null) {
            toaster.danger("Event title is required!");
            return false;
        }
        else if ($('#eventDate').val() == "" || $('#eventDate').val() == 'undefined' || $('#eventDate').val() == null) {
            toaster.danger("Event Date is required!");
            return false;
        }
        else if ($('#eventTime').val() == "" || $('#eventTime').val() == 'undefined' || $('#eventTime').val() == null) {
            toaster.danger("Scheduled time is required!");
            return false;
        }
        else if ($('#eventDuration').val() == "" || $('#eventDuration').val() == 'undefined' || $('#eventDuration').val() == null) {
            toaster.danger("Appointment Length is required!");
            return false;
        }

        else if ($('#CaseAppointmentCategory').val() == "" || $('#CaseAppointmentCategory').val() == 'undefined' || $('#CaseAppointmentCategory').val() == null) {
            toaster.danger("CaseAppointment Category is required!");
            return false;
        } else {

            $("#popupEventForm").modal('hide');
            var dataRow = {
                'CaseAppointmentTitle': $('#eventTitle').val(),
                'CaseAppointmentDate': $('#eventDate').val(),
                'CaseAppointmentTime': $('#eventTime').val(),
                'AppointmentLength': $('#eventDuration').val(),
                'CaseAppointmentProgress': $('#CaseAppointmentProgress').val(),
                'CaseAppointmentCategory': $('#CaseAppointmentCategory').val(),
                'CaseId': $('#caseId').val()
            }

            ClearPopupFormValues();

            $.ajax({
                type: 'POST',
                url: "/Case/SaveEvent",
                data: dataRow,
                success: function (response) {
                    if (response == 'True') {
                        $('#calendar').fullCalendar('refetchEvents');
                        toaster.success("New event saved!");
                    }
                    else {
                        toaster.success("Error, could not save event!");
                    }
                }
            });
        }
    }


    function ShowEventPopup(date) {
        ClearPopupFormValues();
        $("#popupEventForm").modal('show');
        $('#eventTitle').focus();
    }

    function ClearPopupFormValues() {
        $('#eventID').val("");
        $('#eventTitle').val("");
        $('#eventDateTime').val("");
        $('#eventDuration').val("");
    }

    function UpdateEvent(EventID, EventStart, EventEnd) {

        var dataRow = {
            'ID': EventID,
            'NewEventStart': EventStart,
            'NewEventEnd': EventEnd
        }

        $.ajax({
            type: 'POST',
            url: "/Case/UpdateEvent",
            dataType: "json",
            contentType: "application/json",
            data: JSON.stringify(dataRow)
        });
    }

</script>
@Html.HiddenFor(model => model.CaseId, new { @id="caseId"})
<div class="page-content-inner">
    <div class="row">
        <div class="col-lg-12 ">
            <div class="portlet-body">
                <div class="scroller" data-always-visible="1" data-rail-visible1="0" data-handle-color="#D7DCE2">
                    <div id='calendar'></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="popupEventForm" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <button type="button" class="close"
                        data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    Add new event
                </h4>
            </div>

            <!-- Modal Body -->

            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="portlet">
                            <div class="portlet-body form">
                                <div class="form-horizontal">
                                    <div class="col-md-12">
                                        <div class="form-body section ">
                                            <input type="hidden" id="eventID">
                                            <div class="form-group">
                                                <label class="control-label col-md-3">Event title</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-pencil"></i>
                                                    </span>
                                                    @Html.TextBoxFor(model => model.appointmentEntityModel.CaseAppointmentTitle, new { @id = "eventTitle", @placeholder = "Title", @class = "form-control input-medium" })<br />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-md-3">Event Date</label>
                                                @*<div class="input-group  date date-picker" data-date-format="dd-mm-yyyy" data-date-start-date="+0d">*@
                                                    <div class="input-group" data-date-format="dd-mm-yyyy" data-date-start-date="+0d">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-calendar"></i>
                                                        </span>
                                                        @Html.TextBoxFor(model => model.appointmentEntityModel.CaseAppointmentDate, new { @id = "eventDate", @class = "form-control input-medium" })<br />
                                                    </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-md-3">Scheduled time</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-clock-o"></i>
                                                    </span>
                                                    @Html.TextBoxFor(model => model.appointmentEntityModel.CaseAppointmentTime, new { @id = "eventTime", @class = "form-control timepicker timepicker-24 input-medium" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-md-3">Appointment length (minutes)</label>
                                                <div class="input-group">
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-clock-o"></i>
                                                    </span>
                                                    @Html.TextBoxFor(model => model.appointmentEntityModel.AppointmentLength, new { @id = "eventDuration", @placeholder = "Appointment length (minutes)", @class = "form-control input-medium" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(m => m.appointmentEntityModel.CaseAppointmentProgress, new { @class = "control-label col-md-3" })
                                                <div class="input-group">
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-houzz"></i>
                                                    </span>
                                                    @Html.EnumDropDownListFor(m => m.appointmentEntityModel.CaseAppointmentProgress, new { @id = "CaseAppointmentProgress", @class = "form-control input-medium" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(m => m.appointmentEntityModel.CaseAppointmentCategory, new { @class = "control-label col-md-3" })
                                                <div class="input-group">
                                                    <span class="input-group-addon">
                                                        <i class="fa fa-list-alt"></i>
                                                    </span>
                                                    @Html.DropDownListFor(m => m.appointmentEntityModel.CaseAppointmentCategory, new SelectList(Model.appointmentEntityModel.AppointmentCategoryList, "AppointmentCategoryId", "AppointmentTitle"), "---Select Appointment---", new { @id = "CaseAppointmentCategory", @class = "form-control input-medium" })
                                                    @Html.ValidationMessageFor(model => model.appointmentEntityModel.CaseAppointmentCategory)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button onclick="save()" type="button" class="btn btn-primary">
                    Submit
                </button>
                <button type="button" id="btnPopupCancel" data-dismiss="modal" class="btn">Cancel</button>

            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="popupEventDisplay" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <button type="button" class="close"
                        data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    You clicked on event
                </h4>
            </div>

            <!-- Modal Body -->

            <div class="modal-body">
                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th class="center">Event title</th>
                            <th class="center">Scheduled time</th>
                            <th class="center">Appointment length (minutes)</th>
                            <th class="center">Appointment Type</th>
                        </tr>
                    </thead>

                    <tbody id="eventData"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnPopupCancel" data-dismiss="modal" class="btn">Cancel</button>
            </div>
        </div>
    </div>
</div>
